apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: lvmvolumegroups.lvm.topolvm.io
spec:
  group: lvm.topolvm.io
  names:
    kind: LVMVolumeGroup
    listKind: LVMVolumeGroupList
    plural: lvmvolumegroups
    singular: lvmvolumegroup
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: LVMVolumeGroup is the Schema for the lvmvolumegroups API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: LVMVolumeGroupSpec defines the desired state of LVMVolumeGroup
            properties:
              RAIDConfig:
                description: RAIDConfig contains configurations for RAID
                properties:
                  metadataSize:
                    default: 512
                    description: MetadataSize represents the amount of storage in
                      MiB that should be reserved for the Metadata RAID volume. In
                      comparison to non-RAID configurations, a default (and minimal)
                      Size of 512MiB will be reserved for the volume. Assuming ThinPoolConfig.SizePercent=90,
                      then the actual ThinPool will use 90% of the free space on top
                      of 512MiB for the LVM metadata.
                    minimum: 512
                    type: integer
                  mirrors:
                    default: 1
                    description: Mirrors represents how many copies of the data should
                      be held in a separate physical volume. Note that 1 Mirror will
                      equal a total of 1+1=2 volumes holding data.
                    type: integer
                  sync:
                    default: false
                    description: If set to false, causes  the  creation  of mirror,
                      raid1, raid4, raid5 and raid10 to skip the initial synchronization.
                      In case of mirror, raid1 and raid10, any data written afterwards
                      will be mirrored, but the original contents will not be copied.
                      In case of raid4 and raid5, no parity blocks will be written,
                      though any data written afterwards will cause parity blocks
                      to be stored.  This is useful for skipping a potentially long
                      and resource intensive initial sync of an empty mirror/raid1/raid4/raid5
                      and raid10 LV.  This option is not valid for raid6, because
                      raid6 relies on proper parity (P and Q Syndromes) being created
                      during initial synchronization in order to reconstruct proper
                      user date in case of device failures.  raid0 and raid0_meta
                      do not provide any data copies or parity support and thus do
                      not support initial synchronization.
                    type: boolean
                  type:
                    default: raid1
                    description: Type of the RAID configuration
                    type: string
                required:
                - metadataSize
                - mirrors
                - sync
                - type
                type: object
              default:
                description: Default is a flag to indicate whether the device-class
                  is the default
                type: boolean
              deviceSelector:
                description: DeviceSelector is a set of rules that should match for
                  a device to be included in this TopoLVMCluster
                properties:
                  optionalPaths:
                    description: A list of device paths which could be chosen for
                      creating Volume Group. For example "/dev/disk/by-path/pci-0000:04:00.0-nvme-1"
                      We discourage using the device names as they can change over
                      node restarts.
                    items:
                      type: string
                    type: array
                  paths:
                    description: A list of device paths which would be chosen for
                      creating Volume Group. For example "/dev/disk/by-path/pci-0000:04:00.0-nvme-1"
                      We discourage using the device names as they can change over
                      node restarts.
                    items:
                      type: string
                    type: array
                type: object
              nodeSelector:
                description: NodeSelector chooses nodes
                properties:
                  nodeSelectorTerms:
                    description: Required. A list of node selector terms. The terms
                      are ORed.
                    items:
                      description: A null or empty node selector term matches no objects.
                        The requirements of them are ANDed. The TopologySelectorTerm
                        type implements a subset of the NodeSelectorTerm.
                      properties:
                        matchExpressions:
                          description: A list of node selector requirements by node's
                            labels.
                          items:
                            description: A node selector requirement is a selector
                              that contains values, a key, and an operator that relates
                              the key and values.
                            properties:
                              key:
                                description: The label key that the selector applies
                                  to.
                                type: string
                              operator:
                                description: Represents a key's relationship to a
                                  set of values. Valid operators are In, NotIn, Exists,
                                  DoesNotExist. Gt, and Lt.
                                type: string
                              values:
                                description: An array of string values. If the operator
                                  is In or NotIn, the values array must be non-empty.
                                  If the operator is Exists or DoesNotExist, the values
                                  array must be empty. If the operator is Gt or Lt,
                                  the values array must have a single element, which
                                  will be interpreted as an integer. This array is
                                  replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                        matchFields:
                          description: A list of node selector requirements by node's
                            fields.
                          items:
                            description: A node selector requirement is a selector
                              that contains values, a key, and an operator that relates
                              the key and values.
                            properties:
                              key:
                                description: The label key that the selector applies
                                  to.
                                type: string
                              operator:
                                description: Represents a key's relationship to a
                                  set of values. Valid operators are In, NotIn, Exists,
                                  DoesNotExist. Gt, and Lt.
                                type: string
                              values:
                                description: An array of string values. If the operator
                                  is In or NotIn, the values array must be non-empty.
                                  If the operator is Exists or DoesNotExist, the values
                                  array must be empty. If the operator is Gt or Lt,
                                  the values array must have a single element, which
                                  will be interpreted as an integer. This array is
                                  replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                      type: object
                    type: array
                required:
                - nodeSelectorTerms
                type: object
              thinPoolConfig:
                description: ThinPoolConfig contains configurations for the thin-pool
                properties:
                  name:
                    description: Name of the thin pool to be created
                    type: string
                  overprovisionRatio:
                    description: OverProvisionRatio is the factor by which additional
                      storage can be provisioned compared to the available storage
                      in the thin pool.
                    minimum: 2
                    type: integer
                  sizePercent:
                    default: 90
                    description: SizePercent represents percentage of remaining space
                      in the volume group that should be used for creating the thin
                      pool.
                    maximum: 90
                    minimum: 10
                    type: integer
                required:
                - name
                - overprovisionRatio
                type: object
            required:
            - thinPoolConfig
            type: object
          status:
            description: LVMVolumeGroupStatus defines the observed state of LVMVolumeGroup
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
