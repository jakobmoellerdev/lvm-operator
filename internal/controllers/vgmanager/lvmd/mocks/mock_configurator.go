// Code generated by mockery v2.36.0. DO NOT EDIT.

package lvmd

import (
	cmd "github.com/topolvm/topolvm/pkg/lvmd/cmd"

	mock "github.com/stretchr/testify/mock"
)

// MockConfigurator is an autogenerated mock type for the Configurator type
type MockConfigurator struct {
	mock.Mock
}

type MockConfigurator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigurator) EXPECT() *MockConfigurator_Expecter {
	return &MockConfigurator_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields:
func (_m *MockConfigurator) Delete() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigurator_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockConfigurator_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
func (_e *MockConfigurator_Expecter) Delete() *MockConfigurator_Delete_Call {
	return &MockConfigurator_Delete_Call{Call: _e.mock.On("Delete")}
}

func (_c *MockConfigurator_Delete_Call) Run(run func()) *MockConfigurator_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigurator_Delete_Call) Return(_a0 error) *MockConfigurator_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigurator_Delete_Call) RunAndReturn(run func() error) *MockConfigurator_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function with given fields:
func (_m *MockConfigurator) Load() (*cmd.Config, error) {
	ret := _m.Called()

	var r0 *cmd.Config
	var r1 error
	if rf, ok := ret.Get(0).(func() (*cmd.Config, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *cmd.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cmd.Config)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigurator_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockConfigurator_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
func (_e *MockConfigurator_Expecter) Load() *MockConfigurator_Load_Call {
	return &MockConfigurator_Load_Call{Call: _e.mock.On("Load")}
}

func (_c *MockConfigurator_Load_Call) Run(run func()) *MockConfigurator_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigurator_Load_Call) Return(_a0 *cmd.Config, _a1 error) *MockConfigurator_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigurator_Load_Call) RunAndReturn(run func() (*cmd.Config, error)) *MockConfigurator_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: config
func (_m *MockConfigurator) Save(config *cmd.Config) error {
	ret := _m.Called(config)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cmd.Config) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigurator_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockConfigurator_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - config *cmd.Config
func (_e *MockConfigurator_Expecter) Save(config interface{}) *MockConfigurator_Save_Call {
	return &MockConfigurator_Save_Call{Call: _e.mock.On("Save", config)}
}

func (_c *MockConfigurator_Save_Call) Run(run func(config *cmd.Config)) *MockConfigurator_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cmd.Config))
	})
	return _c
}

func (_c *MockConfigurator_Save_Call) Return(_a0 error) *MockConfigurator_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigurator_Save_Call) RunAndReturn(run func(*cmd.Config) error) *MockConfigurator_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigurator creates a new instance of MockConfigurator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigurator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigurator {
	mock := &MockConfigurator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
